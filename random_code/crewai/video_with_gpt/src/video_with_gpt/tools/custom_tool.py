from crewai_tools import BaseTool


class MyCustomTool(BaseTool):
    name: str = "Name of my tool"
    description: str = (
        "Clear description for what this tool is useful for, you agent will need this information to use it."
    )

    def _run(self, argument: str) -> str:
        # Implementation goes here
        return "this is an example of a tool output, ignore it and move along."
    

def generate_summary_from_frames_and_transcription(
    base64Frames, transcription, client, max_frames=5, max_transcription_length=500
):
    """
    Generates a video summary by sending frames and transcription to the OpenAI API.

    Args:
        base64Frames (list): List of base64-encoded frames from the video.
        transcription (str): Audio transcription of the video.
        client (OpenAI): OpenAI client for API calls.
        max_frames (int): Maximum number of frames to include in the request.
        max_transcription_length (int): Maximum length of transcription to include.

    Returns:
        str: Summary generated by the API.
    """
    # Limit the number of frames and transcription length
    selected_frames = base64Frames[:max_frames]
    transcription = (
        transcription[:max_transcription_length]
        if len(transcription) > max_transcription_length
        else transcription
    )

    # Prepare structured `messages` content
    frames_content = [
        {"type": "image_url", "image_url": {"url": f"data:image/jpg;base64,{frame}", "detail": "low"}}
        for frame in selected_frames
    ]
    transcription_content = {"type": "text", "text": f"The audio transcription is: {transcription}"}

    # Send the request
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are generating a video summary. Create a summary of the provided video and its transcript. Respond in Markdown."},
            {"role": "user", "content": ["These are the frames from the video.", *frames_content, transcription_content]},
        ],
        temperature=0,
    )
    print(response)
    return response.choices[0].message.content
